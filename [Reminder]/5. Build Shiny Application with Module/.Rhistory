a <- 7
q()
a <- 7
b <- "test"
b <- 'test'
class(a)
class(b)
## check the data type of a variable
class(a)
class(a)
class(b)
a <- 7
b <- 'test'
c <- c(1,2,3,4,5,6)
## check the data type of a variable
class(a)
class(b)
class(c)
class(d)
d <- d("t", "e", "st")
# Numerical character
d <- d("t", "e", "st")
# Numerical character
d <- c("t", "e", "st")
# A data frame
f <- data.frame(col1 = c, col2 = e)
# A data frame
f <- data.frame(col1 = c, col2 = d)
View(f)
View(f)
View(f)
View(f)
# Numerical character
d <- c("t", "e", "st", 'a', 'b', 'c')
# A data frame
f <- data.frame(col1 = c, col2 = d)
View(f)
# numeric
a <- 7
class(a)
# character
b <- 'test'
class(b)
# Use a C function that stands for "Combine" to create a vector with
# explicitly providing values.
# Numerical vector
c <- c(1,2,3,4,5,6)
class(c)
d <- c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6)
class(d)
# Numerical character
e <- c("t", "e", "st", 'a', 'b', 'c')
class(e)
# A data frame
f <- data.frame(col1 = c, col2 = e)
g <- list(a,b,c,d,e)
class(g)
View(g)
h <- T #or
h <- TRUE
h <- F #or
h <- FALSE
# operation
c + 20
# operation
i <- c + 20
class(a)
clear
clear()
2+2
2+2
2+2
2+2
2 == 2
2 == 3
#### Is not equal?
2!=2
2!=3
3>=1
3<=1
#### R can work with character strings
"apple"
#### It is okay to use spaces in character strings
"an apple"
#### You can use logical operators to see whether character strings exactly
#### match each other
"apple" == 'apple'
"apple" = "appla"
"apple" == "appla"
"apple" != "appla"
#### If you try to use inequalities with charactes, R will coompare how long
#### the character string is
"apple" < "apples"
"apple" > "apples"
#### save the ourput of a command to an object
a <- 2+2
my.a <- 2_2
a <- 2+2
my_a <- 2+2
my.a <- 2_2
numbers <- c(1,2,3)
numbers
fruits <- c("apple", "banana")
fruits
numbers2
numbers2 <- c(4:6)
numbers2
numbers2 <- c(4:6) # put the range of numbers from minimum to maximum
numbers2
true_false <- c(T,F,T)
true_false
numbers3 < c(7:9)
numbers3 <- c(7:9)
numbers3
all_numbers <- c(numbers, numbers2, numbers3)
all_numbers
#### You can select certain elements of a vector
x <- c(-1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
### By position in the vector
x[4]
x[-4]
x[2:4]
x[-(2:4)] #All elements except two to four
x[c(1,5)] #Elements 1 and 5
### By value
x[x == 10]
### By value
x[x == 0]
### By value
x[x == 2]
### By value
x[x == 10]
x[x < 0]
x[x < 0] #All elements less than zero
x[x %in% c(10, 12, 15)]
x[x %in% c(10, 2, 15)]
x[x %in% c(10, 12, 15)] #elements in the set 2, 4, 7
class(numbers)
class(fruits)
class(true_false)
fruits_numbers = c(numbers, fruits)
fruits_numbers
my_vector <- c(1, 0, 1, 0)
my_vector
my_vector <- c(1, 0, 1, 0)
my_vector
my_vector_character <- as.character(my_vector)
my_vector_character
my_vector_logical <- as.logical(my_vector)
my_vector_logical
my_vector_numeric_again <- as.numeric(my_vector_character)
my_vector_numeric_again
my_vector_factor <- as.factor(my_vector)
my_vector_factor
class(my_vector_character)
class(my_vector_factor)
setwd("~/Work/GITHUB/r_projects/[Reminder]/5. Build Shiny Application with Module")
shiny::runApp('myFirstModuleApp')
runApp('myFirstModuleApp')
?tagList
?NS
?moduleServer
?reactiveVal
runApp('myFirstModuleApp')
runApp('myFirstModuleApp')
