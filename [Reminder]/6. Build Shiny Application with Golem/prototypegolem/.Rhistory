}
else{
lembaga_filtered <- input$lembaga_input
}
)
period_filtered <- reactive(
if(is.null(input$periode_input)){
period_filtered <- week_period
}
else{
period_filtered <- input$periode_input
}
)
# ------------------------- List of Lembaga ---------------------------- #
output$lembaga_output <- renderDataTable({
Lembaga <- lembaga_filtered()
datatable(
tibble(Lembaga),
rownames = FALSE, # remove the index number on the table
options = list(dom = 'tp', pageLength = 5) # Turn on the pagination only and show 5 first rows only
)
})
# ------------------------- Metric Kelas ---------------------------- #
output$total_program <- renderText({
result <- sum(filter(df_class_metrics, institution_name %in% lembaga_filtered())$programs_count)
result %>%
prettyNum(big.mark=".", decimal.mark = ",")
})
output$total_program_aktif <- renderText({
result <- sum(filter(df_class_metrics, institution_name %in% lembaga_filtered())$active_programs_count)
result %>%
prettyNum(big.mark=".", decimal.mark = ",")
})
output$total_program_arsip <- renderText({
result <- sum(filter(df_class_metrics, institution_name %in% lembaga_filtered())$archieved_programs_count)
result %>%
prettyNum(big.mark=".", decimal.mark = ",")
})
# ------------------------- Metric Murid ---------------------------- #
metric_murid <- function(lembaga_filtered, period_filtered){
result <- df_student_metrics %>%
select(yearweek_started_at, yearweek_text, institution_name, uniq_users_count, participation_rate, completion_rate, completion_duration_days) %>%
filter(institution_name %in% lembaga_filtered,
yearweek_text %in% period_filtered) %>%
group_by(yearweek_started_at) %>%
summarize(sum_uniq_users_count = sum(uniq_users_count, na.rm = TRUE),
mean_participation_rate = mean(participation_rate, na.rm = TRUE),
mean_completion_rate = mean(completion_rate, na.rm = TRUE),
mean_completion_duration_days = mean(completion_duration_days, na.rm = TRUE)) %>%
arrange(yearweek_started_at)
return(result)
}
output$total_murid <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(sum_uniq_users_count)
result <- sum(result$sum_uniq_users_count, na.rm = TRUE) %>%
prettyNum(big.mark=".", decimal.mark = ",")
return(result)
})
output$rate_participation <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_participation_rate) %>%
tail(1)
result <- percent(result[[1,1]], accuracy = 1)
return(result)
})
output$rate_participation_trend <- renderUI({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_participation_rate) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]])
if(diff < 0){
return(icon(name = 'arrow-down', lib = "font-awesome", style = "color: red"))
}
else{
return(icon(name = 'arrow-up', lib = "font-awesome", style = "color: green"))
}
})
output$rate_participation_stats <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_participation_rate) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]]) %>%
percent(accuracy = .1)
if(diff < 0){
return(paste("<span style=\"color: red\">", as.character(diff), "</span>"), "• was", percent((result[[1,1]]), accuracy = 1), "last week")
}
else{
return(paste("<span style=\"color: green\">", as.character(diff), "</span>", "• was", percent((result[[1,1]]), accuracy = 1), "last week"))
}
})
output$rate_completion <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_rate) %>%
tail(1)
result <- percent(result[[1,1]], accuracy = 1)
return(result)
})
output$rate_completion_trend <- renderUI({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_rate) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]])
if(diff < 0){
return(icon(name = 'arrow-down', lib = "font-awesome", style = "color: red"))
}
else{
return(icon(name = 'arrow-up', lib = "font-awesome", style = "color: green"))
}
})
output$rate_completion_stats <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_rate) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]]) %>%
percent(accuracy = .1)
if(diff < 0){
return(paste("<span style=\"color: red\">", as.character(diff), "</span>"), "• was", percent((result[[1,1]]), accuracy = 1), "last week")
}
else{
return(paste("<span style=\"color: green\">", as.character(diff), "</span>", "• was", percent((result[[1,1]]), accuracy = 1), "last week"))
}
})
output$duration_completion <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_duration_days) %>%
tail(1)
result <- round(result[[1,1]]) %>%
as.character() %>%
paste("days", sep = " ")
return(result)
})
output$duration_completion_trend <- renderUI({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_duration_days) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]])
if(diff < 0){
return(icon(name = 'arrow-down', lib = "font-awesome", style = "color: red"))
}
else{
return(icon(name = 'arrow-up', lib = "font-awesome", style = "color: green"))
}
})
output$duration_completion_stats <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_duration_days) %>%
tail(2)
diff <- ((result[[2,1]] - result[[1,1]]) / result[[1,1]])
diff_pct <- percent(abs(diff), accuracy = .1)
if(diff < 0){
return(paste("<span style=\"color: red\">", as.character(diff_pct), "</span>", "• was", round(result[[1,1]]), "days last week"))
}
else{
return(paste("<span style=\"color: green\">", as.character(diff_pct), "</span>", "• was", round(result[[1,1]]), "days last week"))
}
})
})
runApp()
test <- c(1, 3, NA)
test2 <- c(1, 5, NULL)
mean(test)
test2 <- c(1, 3, NULL)
mean(test2)
View(df_class_metrics)
View(df_student_metrics)
mean(test)
mean(test, na.rm = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
?mean
?outputText
?outputText
?textOutput
# Define the UI
library(shiny)
library(tidyverse)
library(readxl)
library(DT)
library(shinyWidgets)
library(scales)
# Read the Dataset
df_class_metrics <- read_csv("dataset/inst_partner_class_metrics.csv")
setwd("~/Work/CMC 645 - R Shiny Bootcamp/lembagaTeam2")
# Define the UI
library(shiny)
library(tidyverse)
library(readxl)
library(DT)
library(shinyWidgets)
library(scales)
# Read the Dataset
df_class_metrics <- read_csv("dataset/inst_partner_class_metrics.csv")
df_student_metrics <- read_csv("dataset/inst_partner_student_metrics.csv", na = c("", "NULL"))
institutions <- unique(df_class_metrics$institution_name)
week_period <- unique(df_student_metrics$yearweek_text)
# student_metric <- df_student_metrics %>%
#   drop_na() %>%
#   group_by(yearweek_started_at) %>%
#   summarize(mean_participation_rate = mean(participation_rate), mean_completion_rate = mean(completion_rate), mean_completion_duration_days = mean(completion_duration_days))
ui <- fluidPage(
# ------------------------- CSS Formatting ---------------------------- #
tags$head(
tags$style(
HTML("
.header_format {
border-bottom-color: grey;
border-bottom-width: 1px;
border-bottom-style: solid;
background: white
}
.card_format {
background: white
}"
) # end HTML
) # end tags$style
), # end tags$head
# Change the Background Color Page (https://www.w3schools.com/colors/colors_hex.asp)
setBackgroundColor("AliceBlue"),
# ------------------------- Header ---------------------------- #
fluidRow(
column(
width = 12,
titlePanel(h3("Laporan Kelas Lembaga")),
helpText("Shiny Team 2 • Edited 1 day ago by Diardano Raihan"),
class = 'header_format'
)
),
br(),
# ------------------------- Input Filter ---------------------------- #
fluidRow(
column(
width = 3,
selectInput(
inputId = "lembaga_input",
label = "Filter Lembaga: ",
choices = c("e.g. SEKOLAH.MU" = "", institutions), # if the first element in choices has a value of "", its name will be treated as a placeholder prompt
multiple = TRUE,
)
),
column(
width = 4,
selectInput(
inputId = "periode_input",
label = "Filter Periode Pekan: ",
choices = c("e.g. 01 Jan 2019-07 Jan 2019" = "", week_period),
multiple = TRUE
)
)
),
# ------------------------- Module: Nama Lembaga ---------------------------- #
fluidRow(
column(
width = 4,
offset = 4,
wellPanel(
dataTableOutput(outputId = "lembaga_output"),
class = 'card_format'
)
)
),
# ------------------------- Module: Metric Kelas ---------------------------- #
fluidRow(
column(
width = 12,
h3("Metric Kelas", align = "center"),
br()
)
),
fluidRow(
column(
width = 4,
wellPanel(
h1(textOutput(outputId = "total_program"), align = "center"),
h4("Jumlah Program Keseluruhan", align = "center"),
class = 'card_format'
)
),
column(
width = 4,
wellPanel(
h1(textOutput(outputId = "total_program_aktif"), align = "center"),
h4("Jumlah Program Aktif", align = "center"),
class = 'card_format'
)
),
column(
width = 4,
wellPanel(
h1(textOutput(outputId = "total_program_arsip"), align = "center"),
h4("Jumlah Program Arsip", align = "center"),
class = 'card_format'
)
)
),
# ------------------------- Module: Metric Murid ---------------------------- #
fluidRow(
column(
width = 12,
h3("Metric Murid", align = "center"),
br()
)
),
fluidRow(
column(
width = 3,
wellPanel(
h1(textOutput(outputId = "total_murid"), align = "center"),
h4("Jumlah Murid Keseluruhan", align = "center"),
class = 'card_format',
style = "padding: 34px;" # adjust the height of the panel
)
),
column(
width = 3,
wellPanel(
h1(textOutput(outputId = "rate_participation"), align = "center"),
h4("Participation Rate", align = "center"),
helpText(uiOutput(outputId = "rate_participation_trend", inline = T), uiOutput(outputId = "rate_participation_stats" , inline = T), align = "center"),
class = 'card_format'
)
),
column(
width = 3,
wellPanel(
h1(textOutput(outputId = "rate_completion"), align = "center"),
h4("Completion Rate", align = "center"),
helpText(uiOutput(outputId = "rate_completion_trend", inline = T), uiOutput(outputId = "rate_completion_stats" , inline = T), align = "center"),
class = 'card_format'
)
),
column(
width = 3,
wellPanel(
h1(textOutput(outputId = "duration_completion"), align = "center"),
h4("Completion Duration", align = "center"),
helpText(uiOutput(outputId = "duration_completion_trend", inline = T), uiOutput(outputId = "duration_completion_stats" , inline = T), align = "center"),
class = 'card_format'
)
)
)
)
# library(shiny)
# Define server logic
shinyServer(function(input, output) {
# ------------------------- Reactive Function ---------------------------- #
lembaga_filtered <- reactive(
if(is.null(input$lembaga_input)){
lembaga_filtered <- institutions
}
else{
lembaga_filtered <- input$lembaga_input
}
)
period_filtered <- reactive(
if(is.null(input$periode_input)){
period_filtered <- week_period
}
else{
period_filtered <- input$periode_input
}
)
# ------------------------- List of Lembaga ---------------------------- #
output$lembaga_output <- renderDataTable({
Lembaga <- lembaga_filtered()
datatable(
tibble(Lembaga),
rownames = FALSE, # remove the index number on the table
options = list(dom = 'tp', pageLength = 5) # Turn on the pagination only and show 5 first rows only
)
})
# ------------------------- Metric Kelas ---------------------------- #
output$total_program <- renderText({
result <- sum(filter(df_class_metrics, institution_name %in% lembaga_filtered())$programs_count)
result %>%
prettyNum(big.mark=".", decimal.mark = ",")
})
output$total_program_aktif <- renderText({
result <- sum(filter(df_class_metrics, institution_name %in% lembaga_filtered())$active_programs_count)
result %>%
prettyNum(big.mark=".", decimal.mark = ",")
})
output$total_program_arsip <- renderText({
result <- sum(filter(df_class_metrics, institution_name %in% lembaga_filtered())$archieved_programs_count)
result %>%
prettyNum(big.mark=".", decimal.mark = ",")
})
# ------------------------- Metric Murid ---------------------------- #
metric_murid <- function(lembaga_filtered, period_filtered){
result <- df_student_metrics %>%
select(yearweek_started_at, yearweek_text, institution_name, uniq_users_count, participation_rate, completion_rate, completion_duration_days) %>%
filter(institution_name %in% lembaga_filtered,
yearweek_text %in% period_filtered) %>%
group_by(yearweek_started_at) %>%
summarize(sum_uniq_users_count = sum(uniq_users_count, na.rm = TRUE),
mean_participation_rate = mean(participation_rate, na.rm = TRUE),
mean_completion_rate = mean(completion_rate, na.rm = TRUE),
mean_completion_duration_days = mean(completion_duration_days, na.rm = TRUE)) %>%
arrange(yearweek_started_at)
return(result)
}
output$total_murid <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(sum_uniq_users_count)
result <- sum(result$sum_uniq_users_count, na.rm = TRUE) %>%
prettyNum(big.mark=".", decimal.mark = ",")
return(result)
})
output$rate_participation <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_participation_rate) %>%
tail(1)
result <- percent(result[[1,1]], accuracy = 1)
return(result)
})
output$rate_participation_trend <- renderUI({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_participation_rate) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]])
if(diff < 0){
return(icon(name = 'arrow-down', lib = "font-awesome", style = "color: red"))
}
else{
return(icon(name = 'arrow-up', lib = "font-awesome", style = "color: green"))
}
})
output$rate_participation_stats <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_participation_rate) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]]) %>%
percent(accuracy = .1)
if(diff < 0){
return(paste("<span style=\"color: red\">", as.character(diff), "</span>"), "• was", percent((result[[1,1]]), accuracy = 1), "last week")
}
else{
return(paste("<span style=\"color: green\">", as.character(diff), "</span>", "• was", percent((result[[1,1]]), accuracy = 1), "last week"))
}
})
output$rate_completion <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_rate) %>%
tail(1)
result <- percent(result[[1,1]], accuracy = 1)
return(result)
})
output$rate_completion_trend <- renderUI({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_rate) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]])
if(diff < 0){
return(icon(name = 'arrow-down', lib = "font-awesome", style = "color: red"))
}
else{
return(icon(name = 'arrow-up', lib = "font-awesome", style = "color: green"))
}
})
output$rate_completion_stats <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_rate) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]]) %>%
percent(accuracy = .1)
if(diff < 0){
return(paste("<span style=\"color: red\">", as.character(diff), "</span>"), "• was", percent((result[[1,1]]), accuracy = 1), "last week")
}
else{
return(paste("<span style=\"color: green\">", as.character(diff), "</span>", "• was", percent((result[[1,1]]), accuracy = 1), "last week"))
}
})
output$duration_completion <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_duration_days) %>%
tail(1)
result <- round(result[[1,1]]) %>%
as.character() %>%
paste("days", sep = " ")
return(result)
})
output$duration_completion_trend <- renderUI({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_duration_days) %>%
tail(2)
diff <- (result[[2,1]] - result[[1,1]])
if(diff < 0){
return(icon(name = 'arrow-down', lib = "font-awesome", style = "color: red"))
}
else{
return(icon(name = 'arrow-up', lib = "font-awesome", style = "color: green"))
}
})
output$duration_completion_stats <- renderText({
result <- metric_murid(lembaga_filtered(), period_filtered()) %>%
select(mean_completion_duration_days) %>%
tail(2)
diff <- ((result[[2,1]] - result[[1,1]]) / result[[1,1]])
diff_pct <- percent(abs(diff), accuracy = .1)
if(diff < 0){
return(paste("<span style=\"color: red\">", as.character(diff_pct), "</span>", "• was", round(result[[1,1]]), "days last week"))
}
else{
return(paste("<span style=\"color: green\">", as.character(diff_pct), "</span>", "• was", round(result[[1,1]]), "days last week"))
}
})
})
runApp()
