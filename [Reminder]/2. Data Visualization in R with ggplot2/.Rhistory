geom_bar()+
labs(x = "Party", y = "Number of Members")+
scale_fill_manual(values = c("blue", "red"))+
guides(fill = FALSE)
apple <- rep("apple", 6)
orange <- rep("orange", 3)
banana <- rep("banana", 1)
fruit_bowl
fruit_bowl <- tibble("fruits" = c(apple, orange, banana))
fruit_bowl
# create a table that counts fruits in a second column
table(fruit_bowl$fruits)
# create a table that counts fruits in a second column
fruit_bowl %>%
group_by(fruits) %>%
summarize("count" = n())
# create a table that counts fruits in a second column
fruit_bowl_summary <- fruit_bowl %>%
group_by(fruits) %>%
summarize("count" = n())
fruit_bowl_summary
# calculate the proportion
fruit_bowl_summary$count/sum(fruit_bowl_summary$count)
# calculate the proportion
fruit_bowl_summary$proportion <- fruit_bowl_summary$count/sum(fruit_bowl_summary$count)
# add the geom_bar, using "stat" to tell command to plot the exact value for proportion
ggplot(fruit_bowl_summary, aes(x = fruits, y = proportion))+
geom_bar()
# add the geom_bar, using "stat" to tell command to plot the exact value for proportion
ggplot(fruit_bowl_summary, aes(x = fruits, y = proportion))+
geom_bar(stat = "identity")
?geom_bar
# add the geom_bar, using "stat" to tell command to plot the exact value for proportion
ggplot(fruit_bowl_summary, aes(x = fruits, y = proportion, fill = fruits))+
geom_bar(stat = "identity")
# add the geom_bar, using "stat" to tell command to plot the exact value for proportion
ggplot(fruit_bowl_summary, aes(x = fruits, y = proportion, fill = fruits))+
geom_bar(stat = "identity")+
scale_fill_manual(values = c("red", "yellow", "orange"))
# add the geom_bar, using "stat" to tell command to plot the exact value for proportion
ggplot(fruit_bowl_summary, aes(x = fruits, y = proportion, fill = fruits))+
geom_bar(stat = "identity")+
scale_fill_manual(values = c("red", "yellow", "orange"))+
guides(fill = FALSE)
# add the geom_bar, using "stat" to tell command to plot the exact value for proportion
ggplot(fruit_bowl_summary, aes(x = fruits, y = proportion, fill = fruits))+
geom_bar(stat = "identity")+
scale_fill_manual(values = c("red", "yellow", "orange"))+
guides(fill = FALSE)+
labs(x = "Fruits", y = "Proportion of Fruits")
cces <- read_csv("cces_sample_coursera.csv")
# create counts of Democrats, Republicans, and Independents by Region
cces$region_name <- recode(cces, '1' = "Northwest", '2' = "Midwest", '3' = "South", '4' = "West")
# create counts of Democrats, Republicans, and Independents by Region
cces$region_name <- recode(cces$region, '1' = "Northwest", '2' = "Midwest", '3' = "South", '4' = "West")
cces$dem_rep <- recode(cces$pid7, '1' = "Democrat", '2' = "Democrat", '3' = "Democrat", '4' = "Independent", '5' = "Republican", '6' =  "Republican", '7' = "Republican")
ggplot(cces, aes(x = region_name, fill = dem_rep))+
geom_bar()
ggplot(cces, aes(x = region_name, fill = dem_rep))+
geom_bar(position = "dodge")
ggplot(cces, aes(x = region_name, fill = dem_rep))+
geom_bar(position = "dodge")+
labs(x = "Region", y = "Count")
library(tidyverse)
library(knitr)
years <- seq(from = 2001, to = 2020, by = 1)
years <- seq(from = 2001, to = 2020, by = 1)
price <- rnorm(20, mean = 15, sd = 5)
ggplot(price, aes(x = price))+
geom_histogram()
price
dummy <- as_tibble(price)
dummy
ggplot(dummy, aes(x = value))+
geom_histogram()
# put years and price together
fig_data <- tibble("year" = years, "stock_price" = price)
ggplot(fig_data, aes(x = year, y = stock_price))+
geom_line()
# Make data for the first of two stocks
fig_data$stock_id <- rep("stock_1", 20)
stock_1_time_series <- fig_data
ggplot(stock_1_time_series, aes(x = year, y = stock_price))+
geom_line()
price <- rnorm(20, mean = 10, sd = 3)
stock_id <- rep("stock_2", 20)
stock_2_time_series <- tibble("year" = years, "stock_price" = price, "stock_id" = stock_id)
# combine the data using bind_rows()
bind_rows(stock_1_time_series, stock_2_time_series)
# combine the data using bind_rows()
all_stocks_time_series <- bind_rows(stock_1_time_series, stock_2_time_series)
# make the plot, setting group to stock_id
ggplot(all_stocks_time_series, aes(x = year, y = stock_price, group = stock_id))+
geom_line()
# modify group, linetype, color, and facet_wrap()
ggplot(all_stocks_time_series, aes(x = year, y = stock_price, group = stock_id, line_type = stock_id, color = stock_id))+
geom_line()
# modify group, linetype, color, and facet_wrap()
ggplot(all_stocks_time_series, aes(x = year, y = stock_price, group = stock_id, line_type = stock_id, color = stock_id))+
geom_line()+
facet_wrap(~stock_id)
cel <- read_csv("cel_dataset_coursera.csv")
cel$party <- recode(cel$dem, '1' = "Democrat", '0' = "Republican")
fig_data <- cel %>%
group_by(party, year) %>%
summarize("ideology" = mean(dwnom1, na.rm = T))
View(fig_data)
View(fig_data)
View(fig_data)
# Let's make the plot
ggplot(fig_data, aes(x = year, y = ideology, group = party, color = party))+
geom_line()+
scale_color_manual(values = c("blue", "red"))
# Let's practice using another dataset
cel <- read_csv("cel_dataset_coursera.csv")
cel$party <- recode(cel$dem, '1' = "Democrat", '0' = "Republican")
fig_data <- cel %>%
group_by(party, year) %>%
summarize("ideology" = mean(dwnom1, na.rm = T))
View(fig_data)
# Let's make the plot
ggplot(fig_data, aes(x = year, y = ideology, group = party, color = party))+
geom_line()+
scale_color_manual(values = c("blue", "red"))
clearPushBack()
L
L
# Library
library(ggplot2)
# Dummy data
x <- LETTERS[1:20]
y <- paste0("var", seq(1,20))
?expand.grid
?runif
data <- expand.grid(X=x, Y=y)
data
# Heatmap
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- runif(400, 0, 5)
# Heatmap
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
players <- c("Michael", "LeBron", "Kobe")
points <- c(35, 40, 45)
assists <- c(10, 12, 5)
rebounds <- c(15, 12, 5)
basketball <- tibble(players, points, assists, rebounds)
# standardize the value
basketball
# standardize the value
basketball$standardize_points <- basketball$points/max(basketball$points)
basketball
basketball$standardize_assists <- basketball$assists/max(basketball$assists)
basketball$standardize_rebounds <- basketball$rebounds/max(basketball$rebounds)
basketball
basketball_standardize <- select(basketball, "players", "standardize_points", "standardize_assists", "standardize_rebounds")
basketball_standardize
# We need to convert the wide tibble into long tibble using pivot_longer() function
long_basketball_scaled <- pivot_longer(data = basketball_standardize, cols = c("standardize_points", "standardize_assists", "standardize_rebounds"), names_to = "stat", values_to = "value")
long_basketball_scaled
# make the heatmap plot
ggplot(long_basketball_scaled, aes(players, stat, fill= value)) +
geom_tile()
# make the heatmap plot
ggplot(long_basketball_scaled, aes(x = players, y = stat, fill= value)) +
geom_tile()
# Library
library(tidyverse)
kid <- c("Nick", "Jessica", "Justin", "Brandi", "Kelly", "Enrique")
kid <- c("Nick", "Jessica", "Justin", "Brandi", "Kelly", "Enrique")
time_spent <- c(40, 35, 25, 20, 10, 5)
high_score <- c(100, 75, 85, 50, 25, 30)
library(tidyverse)
tetris <- tibble(kid, time_spent, high_score)
View(tetris)
tetris
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid))
# remove the geom_point so only the labels that exist
ggplot(tetris, aes(x = time_spent, y = high_score))+
#geom_point()+
geom_text(aes(label = kid))
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid, nudge_y = 10))
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid, nudge_y = 100))
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid), nudge_y = 10)
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid), nudge_y = 5)
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid), nudge_y = 2)
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid), nudge_y = 5)
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid), nudge_y = 3)
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid), nudge_y = 3, nudge_x = 3)
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid), nudge_y = 3, nudge_x = 1)
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid), nudge_y = 2, nudge_x = 1)
# use parameter `nudge_x` or `nudge_y` inside `geom_text` function to move the text
ggplot(tetris, aes(x = time_spent, y = high_score))+
geom_point()+
geom_text(aes(label = kid), nudge_y = 2.5, nudge_x = 1)
?geom_text
cel <- drop_na(read_csv("cel_dataset_coursera.csv"))
View(cel)
# use piping to feed the data to ggplot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass), label = thomas_name)+
geom_point()+
geom_text()
# use piping to feed the data to ggplot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass), label = thomas_name)+
geom_point()
# use piping to feed the data to ggplot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass, label = thomas_name))+
geom_point()+
geom_text()
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass, label = thomas_name))+
geom_point()+
# specify here that you only want the geom_text to apply to a subset of the data
geom_text(data = filter(cel, congress == 115 & all_pass > 8))
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass, label = thomas_name))+
geom_point()+
# specify here that you only want the geom_text to apply to a subset of the data
geom_text(data = filter(cel, congress == 115 & all_pass > 8), nudge_y = 3)
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass, label = thomas_name))+
geom_point()+
# specify here that you only want the geom_text to apply to a subset of the data
geom_text(data = filter(cel, congress == 115 & all_pass > 8), nudge_x = 5)
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass, label = thomas_name))+
geom_point()+
# specify here that you only want the geom_text to apply to a subset of the data
geom_text(data = filter(cel, congress == 115 & all_pass > 8), nudge_x = 1)
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass, label = thomas_name))+
geom_point()+
# specify here that you only want the geom_text to apply to a subset of the data
geom_text(data = filter(cel, congress == 115 & all_pass > 8), nudge_x = 0.1)
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass, label = thomas_name))+
geom_point()+
# specify here that you only want the geom_text to apply to a subset of the data
geom_text(data = filter(cel, congress == 115 & all_pass > 8), nudge_x = 0.2)
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass, label = thomas_name))+
geom_point()+
# specify here that you only want the geom_text to apply to a subset of the data
geom_text(data = filter(cel, congress == 115 & all_pass > 8))
library(ggrepel)
install.packages("ggrepel")
?vignettes
vignettes("tidyverse")
vignette("tidyverse")
vignette(tidyverse)
vignette(ggplot)
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass, label = thomas_name))+
geom_point()+
# specify here that you only want the geom_text to apply to a subset of the data
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8))
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))
# install.packages("ggrepel")
library(ggrepel)
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))
# add rectangular highlight and annotation to the plot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))+
?annotate()
# add rectangular highlight and annotation to the plot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))+
?annotate
# add rectangular highlight and annotation to the plot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))+
?annotate
# add rectangular highlight and annotation to the plot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))+
?annotate
?annotate
# add rectangular highlight and annotation to the plot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))+
annotate("rect", xmin = .5, xmax = .4, ymin = 13, ymax = 15, alpha = .2, fill = "red")
# add rectangular highlight and annotation to the plot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))+
annotate("rect", xmin = .05, xmax = .4, ymin = 13, ymax = 15, alpha = .2, fill = "red")
# add rectangular highlight and annotation to the plot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))+
annotate("rect", xmin = .05, xmax = .4, ymin = 13, ymax = 15, alpha = .2, fill = "red")+
annotate("text", x = .6 , y = 14, label = "Most Passed", color = 'red')
# add rectangular highlight and annotation to the plot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))+
annotate("rect", xmin = .05, xmax = .4, ymin = 13, ymax = 15, alpha = .2, fill = "red")+
annotate("text", x = .5 , y = 14, label = "Most Passed", color = 'red')
# add rectangular highlight and annotation to the plot
cel %>%
filter(congress == 115) %>%
ggplot(aes(x = dwnom1, y = all_pass))+
geom_point()+
geom_text_repel(data = filter(cel, congress == 115 & all_pass > 8), mapping = aes(x = dwnom1, y = all_pass, label = thomas_name))+
annotate("rect", xmin = .05, xmax = .4, ymin = 13, ymax = 15, alpha = .2, fill = "red")+
annotate("text", x = .55 , y = 14, label = "Most Passed", color = 'red')
install.packages("RColorBrewer")
install.packages("ggthemes")
library(tidyverse)
library(RColorBrewer)
library(ggthemes)
cces <- read_csv("cces_sample_coursera.csv")
plot_data <- select(cces, "cc18_308a", "ideo5", "educ", "faminc_new", "employ") %>% drop_na()
plot_data <- select(cces, "CC18_308a", "ideo5", "educ", "faminc_new", "employ") %>% drop_na()
ggplot(plot_data, aes(y = CC18_308a, x = ideo5))+
geom_jitter()
ggplot(plot_data, aes(y = CC18_308a, x = ideo5))+
geom_jitter()
ggplot(plot_data, aes(y = CC18_308a, x = ideo5, color = educ))+
geom_jitter()
ggplot(plot_data, aes(y = CC18_308a, x = ideo5, color = educ, size = faminc_new))+
geom_jitter()
ggplot(plot_data, aes(y = CC18_308a, x = ideo5, color = educ, size = faminc_new))+
geom_jitter()+
# use scale_color_gradient here to show continuous change in a numeric variable
scale_color_gradient(low = 'gray', high = 'purple')
# Use employment as categorical variable
plot_data$employ_cat <- recode(plot_data$employ, '1' = "Full-time", '2' = "Part-time", '3' = "Temp. Layoff", '4' = "Unemployed", '5' = "Retired", '6' = "Disabled", '7' = "Homemaker", '8' = "Student", '9' = "Other")
# Instead of scale color gradient, use scale color brewer for the discrete variable you have created
ggplot(plot_data, aes(y = CC18_308a, x = ideo5, color = educ, size = faminc_new))+
geom_jitter()+
scale_color_brewer(palette = "RdY1Gn")
# Instead of scale color gradient, use scale color brewer for the discrete variable you have created
ggplot(plot_data, aes(y = CC18_308a, x = ideo5, color = educ, size = faminc_new))+
geom_jitter()+
scale_color_brewer(palette = "RdYlGn")
# Instead of scale color gradient, use scale color brewer for the discrete variable you have created
ggplot(plot_data, aes(y = CC18_308a, x = ideo5, color = employ_cat))+
geom_jitter()+
scale_color_brewer(palette = "RdYlGn")
- There are many palletes -- https://www.r-graph-gallery.com/38-rcolorbrewers-palettes
# Instead of scale color gradient, use scale color brewer for the discrete variable you have created
ggplot(plot_data, aes(y = CC18_308a, x = ideo5, color = employ_cat))+
geom_jitter()
# Instead of scale color gradient, use scale color brewer for the discrete variable you have created
ggplot(plot_data, aes(y = CC18_308a, x = ideo5, color = employ_cat))+
geom_jitter()+
scale_color_brewer(palette = "RdYlGn")
View(plot_data)
ggplot(plot_data, aes(x = ideo5, y = CC18_308a, color = Employment))+
geom_jitter()
ggplot(plot_data, aes(x = ideo5, y = CC18_308a, color = employ_cat))+
geom_jitter()
ggplot(plot_data, aes(x = ideo5, y = CC18_308a, color = employ_cat))+
geom_jitter()+
scale_color_brewer(name = employ_cat, pallete = "RdYlGn")
ggplot(plot_data, aes(x = ideo5, y = CC18_308a, color = employ_cat))+
geom_jitter()+
scale_color_brewer(name = employ_cat, palette = "RdYlGn")
ggplot(plot_data, aes(x = ideo5, y = CC18_308a, color = employ_cat))+
geom_jitter()+
scale_color_brewer(name = "employ_cat", palette = "RdYlGn")
ggplot(plot_data, aes(x = ideo5, y = CC18_308a, color = employ_cat))+
geom_jitter()+
scale_color_brewer(name = "employ_cat", palette = "RdYlGn")+
# look at all the control you have using the theme() function
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, hjust = 1, color = "blue"),
axis.title = element_text(color = "red"))+
labs(x = "Ideology",y = "Trump Approval",
title = "trump Approval, Ideology, and Employment", caption = "A caption might have a quick note about the figure or a sourcing")
ggplot(plot_data, aes(x = ideo5, y = CC18_308a, color = employ_cat))+
geom_jitter()+
theme_wsj()
# you can still control elements of a pre-baked ggtheme yourself by adding additional theme() functions
ggplot(plot_data, aes(x = ideo5, y = CC18_308a, color = employ_cat))+
geom_jitter()+
theme_wsj()+
theme(axis.text = element_text(angle = 90))
#####to save files as .svg from ggsave
install.packages("svglite")
clear
getwd()
setwd("/Users/diardanoraihan/Work/GITHUB/r_projects/[Reminder]/2. Data Visualization in R with ggplot2")
library(tidyverse)
library(knitr)
library(ggtheme)
library(ggthemes)
library(RColorBrewer)
cces <- read_csv("cces_sample_coursera.csv")
cel <- read("cel_dataset_coursera.csv")
cel <- read_csv("cel_dataset_coursera.csv")
ggplot(cces, aes(x = educ, y = ideo5))+
geom_jitter()
# Add a line that fit the plot
ggplot(cces, aes(x = educ, y = ide05))+
geom_jitter()+
geom_smooth()
# Add a line that fit the plot
ggplot(cces, aes(x = educ, y = ideo5))+
geom_jitter()+
geom_smooth()
ggplot(cces, aes(x = educ, y = ideo5))+
geom_jitter()+
geom_smooth()
ggplot(cces, aes(x = educ, y = ideo5))+
geom_jitter()+
geom_smooth()
# Add a line that fit the plot
ggplot(cces, aes(x = educ, y = ideo5))+
geom_jitter()+
geom_smooth(method = "lm")
# Add a loess curve moder "lm" that fit the plot
ggplot(cces, aes(x = educ, y = ideo5))+
geom_jitter()+
geom_smooth(method = "loess")
# Change the confidence level
ggplot(cces, aes(x = educ, y = ideo5))+
geom_jitter()+
geom_smooth(method = "lm", level = .9)
install.packages("GGally")
# install.packages("GGally")
library(GGally)
var1 <- runif(100, 0, 1)
var2 <- var1 + runif(100, 1, 2)
var1 <- runif(100, 0, 1)
var2 <- var1 + runif(100, 1, .2)
var3 <- var1*(-runif(100, 1, .2))
var1 <- runif(100, 0, 1)
var2 <- var1 + rnorm(100, 1, .2)
var3 <- var1*(-rnorm(100, 1, .2))
df <- tibble(var1, var2, var3)
df
ggpairs(df)
